/*****************************************************************
         HotKnot: A heuristic algorithm for RNA secondary 
            structure prediction including pseudoknots
         File: defines.h
         
         Includes all globals and structs used. See structs.h, global.h, constants.h
         for defines used by Simfold functionality.
 
    Date        : Oct. 16, 2004
    copyright   : (C) 2004 by Baharak Rastegari, Jihong Ren  
    email       : baharak@cs.ubc.ca, jihong@cs.ubc.ca        
******************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/


#ifndef DEFINES_H
#define DEFINES_H
#include <stdio.h>
#include <stdlib.h>
#include <memory.h>
#include <assert.h>
#include <string.h>
#include <time.h>



#include "constants.h"
#include "structs.h"
#include "structsPK.h"
#include "externs.h"
#include "externsPK.h"
#include "commonPK.h"
#include "common.h"

/////////////////////////////////////////////////////////////////////////////
//		 				USER DEFINED PARAMETERS
/////////////////////////////////////////////////////////////////////////////

// *** Change these flags to 1 to allow debugging statements to print out
const int DEBUG = 1;   // comphrehensive debugging statements for all energy functions
const int DEBUG2 = 1;  // further debugging information (simfold functions + pre-energy calculations)

// *** Specify the location of configuration file for input parameter filenames
//char config_file[200] = "/cs/beta/People/Cpop/2007/PKEnergy/Version1.0/params/pairfold.conf";

// *** Change these flags to 1 to output energy for one or more energy models; 0 to disable energy computation
const int RE_FLAG = 1;  // compute energy using Rivas & Eddy energy model
const int DP_FLAG = 1;  // compute energy using Dirks & Pierce energy model
const int CC2006_FLAG = 1;  // compute energy using Cao & Chen 2006 energy model
const int CC2006withDP_FLAG = 1;  // compute energy using Cao & Chen 2006 energy model with variation

// *** Add other energy models here (use next consecutive integer for new energy models)
const int RE = 0;  // id for Rivas&Eddy energy computation in Loop.cpp
const int DP = 1;  // id for Dirks&Pierce energy computation in Loop.cpp
const int CC2006 = 2;  // id for Cao&Chen 2006 energy compution in Loop.cpp
const int CC2006withDP = 3;  // id for Cao&Chen 2006 energy compution with variation in Loop.cpp

// *** Maximum number of bases in the RNA strand
const int MaxN = 1600;

/////////////////////////////////////////////////////////////////////////////

// Do not change
const int LOWINF = 16000;  // infinity used by HotKnots (100 times smaller than that used by Simfold)

/*
// Rivas & Eddy energy parameters -- implemented in structsPK.h
const float g_interiorPseudo = 0.83;
const int multi_OffsetPseudo = 843;
const int q_unpairedMultiPseudo = 0;
const int p_pairedMultiPseudo = 100;
*/


// Structs

struct T_IntList{	int Num;	T_IntList * Next;};
/******************************************
//elements of the stack -- old usage, no longer necessary
*******************************************/
/*
struct T_stackelem { 
    int MarkB , MarkP , MarkN , next, prev, nextM, prevM;
    //$next and $prev keep track of the next and the previous elements on the stack
	//nextM and pervM are the same as next and prev with skipping those nodes who have markN&markP&!markB
};
*/  // July 16 - remove
/******************************************
//elements of the stack -- Hosna, March 8th, 2007
*******************************************/

typedef struct region
{
	int begin;
	int end;
	region()
	{
		begin = -1;
		end = -1;
	}
};
/******************************************
//possible types of the loops
*******************************************/
enum LoopType{      stackloop, hairpin,	interior,	multi,	external,	pseudo
};
/******************************************
//possible location status for the loops
*******************************************/
enum PseudoNestedType{	nothing, inBand, unBand, inMulti
};
/******************************************
*******************************************/
struct T_AllLoops{	int base1, base2;
};

/******************************************
*******************************************/
struct B_pattern {

	bool isLeftBorder; // true for the indexs if it is recognized to be the left border of a band region
	int next, prev; // next and prev elements in the pattern	
	int OtherBorder; // right border of the band region
};


//enum SpanBandType{
//	nothing, internal, multi
//};

//struct SpanBand {
//	int next, prev;
//	SpanBandType spanType;  // type of span band loop it is
//};



#endif
